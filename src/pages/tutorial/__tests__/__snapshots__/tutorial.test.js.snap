// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TutorialPage Component should render the ConnectedTutorialPage component 1`] = `
<Component
  getThread={[Function]}
  thread={
    Object {
      "pending": true,
    }
  }
/>
`;

exports[`TutorialPage Component should render the TutorialPage component error state 1`] = `""`;

exports[`TutorialPage Component should render the TutorialPage component fulfilled state 1`] = `
<Fragment>
  <Grid
    bsClass="container"
    componentClass="div"
    fluid={true}
  >
    <Row
      bsClass="row"
      componentClass="div"
    >
      <withRouter(Connect(Masthead)) />
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        className="integr8ly-task-container"
        componentClass="div"
        sm={8}
        xs={12}
      >
        <div
          className="integr8ly-task-dashboard-header"
        >
          <h3 />
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="primary"
            disabled={false}
            onClick={[Function]}
          >
            tutorial.getStarted
          </Button>
        </div>
        <div
          className="alert alert-primary"
          style={
            Object {
              "marginTop": 10,
            }
          }
        >
          <h3
            className="integr8ly-tutorial-prereqs"
          >
            tutorial.prereq
          </h3>
          <ul
            className="fa-ul"
          >
            <li
              key="0"
            >
              <i
                className="fa-li fa fa-check-square-o"
              />
              Github account
            </li>
          </ul>
        </div>
        <Component
          attributes={Object {}}
        />
      </Col>
      <Col
        bsClass="col"
        className="integr8ly-task-container"
        componentClass="div"
        sm={4}
      >
        <h4
          className="integr8ly-helpful-links-heading"
        >
          Helpful Links
        </h4>
        <h4
          className="integr8ly-helpful-links-product-title"
        >
          Red Hat OpenShift
        </h4>
        <ul
          className="list-unstyled"
        >
          <li>
            <a
              href="https://help.openshift.com/"
            >
              OpenShift Online Help Center
            </a>
          </li>
          <li>
            <a
              href="https://blog.openshift.com/"
            >
              OpenShift Blog
            </a>
          </li>
        </ul>
        <h4
          className="integr8ly-helpful-links-product-title"
        >
          Red Hat Fuse
          <span
            className="label label-default integr8ly-label-preview"
          >
            Preview
          </span>
        </h4>
        <ul
          className="list-unstyled"
        >
          <li>
            <a
              href="https://developers.redhat.com/products/fuse/help/"
            >
              Fuse Community Q&A
            </a>
          </li>
          <li>
            <a
              href="https://developers.redhat.com/videos/vimeo/95497167/"
            >
              Fuse Overview
            </a>
          </li>
        </ul>
        <h4
          className="integr8ly-helpful-links-product-title"
        >
          Red Hat AMQ
          <span
            className="label label-default integr8ly-label-preview"
          >
            Preview
          </span>
        </h4>
        <ul
          className="list-unstyled"
        >
          <li>
            <a
              href="https://developers.redhat.com/products/amq/help/"
            >
              AMQ Community Q&A
            </a>
          </li>
          <li>
            <a
              href="https://access.redhat.com/products/red-hat-amq"
            >
              AMQ Videos
            </a>
          </li>
        </ul>
        <h4
          className="integr8ly-helpful-links-product-title"
        >
          Eclipse Che
          <span
            className="label label-default integr8ly-label-community"
          >
            Community
          </span>
        </h4>
      </Col>
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <Col
        bsClass="col"
        componentClass="div"
        sm={8}
        xs={12}
      >
        <h3>
          tutorial.tasksToComplete
          <div
            className="pull-right integr8ly-task-dashboard-time-to-completion"
          >
            <Button
              active={false}
              block={false}
              bsClass="btn"
              bsStyle="primary"
              disabled={false}
              onClick={[Function]}
            >
              tutorial.getStarted
            </Button>
          </div>
        </h3>
        <ListView
          className="integr8ly-list-view-pf"
        >
          <ListViewItem
            actions={
              <div
                className="integr8ly-task-dashboard-estimated-time"
              >
                <Icon
                  name="clock-o"
                  style={
                    Object {
                      "marginRight": 5,
                    }
                  }
                  type="fa"
                />
                 
                <span>
                  6
                   
                  tutorial.minutes
                </span>
              </div>
            }
            additionalInfo={null}
            checkboxInput={null}
            compoundExpand={false}
            compoundExpanded={false}
            description="EnMasse simplifies running messaging infrastructure for your organization. You use it to provide messaging services from a Node.js app to a Spring Boot app."
            heading="1. Creating an EnMasse space"
            hideCloseIcon={false}
            key="0"
            leftContent={null}
            onCloseCompoundExpand={[Function]}
            onExpand={[Function]}
            onExpandClose={[Function]}
            stacked={true}
          />
          <ListViewItem
            actions={
              <div
                className="integr8ly-task-dashboard-estimated-time"
              >
                <Icon
                  name="clock-o"
                  style={
                    Object {
                      "marginRight": 5,
                    }
                  }
                  type="fa"
                />
                 
                <span>
                   
                  tutorial.minutes
                </span>
              </div>
            }
            additionalInfo={null}
            checkboxInput={null}
            compoundExpand={false}
            compoundExpanded={false}
            description="Total estimated time to complete"
            heading={null}
            hideCloseIcon={false}
            leftContent={null}
            onCloseCompoundExpand={[Function]}
            onExpand={[Function]}
            onExpandClose={[Function]}
            stacked={true}
          />
        </ListView>
      </Col>
    </Row>
  </Grid>
</Fragment>
`;

exports[`TutorialPage Component should render the TutorialPage component pending state 1`] = `""`;
